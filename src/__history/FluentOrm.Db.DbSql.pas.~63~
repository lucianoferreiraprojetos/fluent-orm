unit FluentOrm.Db.DbSql;

interface

uses
  System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FluentOrm.Db.DbConnection,
  System.Generics.Collections;

type

  TProcForEach = reference to procedure(const AFields: TFields);

  IDbSql = interface
    ['{4532352D-E423-47A3-BDBD-971826138DF4}']
    function AddSQL(const ASQL: String): IDbSql;
    function SetParam(const AParamName: String; const AParamValue: Variant): IDbSql;
    procedure ExecSQL; overload;
    function ExecSQL(const ASQL: String): Integer; overload;
    procedure GetResultDataSetForEach(AProcForEach: TProcForEach);
    function GetResultDataSet: TDataSet; overload;
    function GetResultDataSet(const IsDetached: Boolean): TDataSet; overload;
  end;

  TDbSql = class(TInterfacedObject,IDbSql)
  private
    FDbConnection: TDbConnection;
    FFDQuery: TFDQuery;
    FParamList: TDictionary<String,Variant>;
    constructor Create(ADbConnection: TDbConnection);
    destructor Destroy; override;
    function CreateFDQuery: TFDQuery;
  public
    function AddSQL(const ASQL: String): IDbSql;
    function SetParam(const AParamName: String; const AParamValue: Variant): IDbSql;
    procedure GetResultDataSetForEach(AProcForEach: TProcForEach);
    function GetResultDataSet: TDataSet; overload;
    function GetResultDataSet(const IsDetached: Boolean): TDataSet; overload;
    function ExecSQL(const ASQL: String): Integer; overload;
    procedure ExecSQL; overload;
  public
    class function New(ADbConnection: TDbConnection): IDbSql;
  end;

implementation

uses
  System.SysUtils;

{ TDbSql }

function TDbSql.AddSQL(const ASQL: String): IDbSql;
begin
  Result := Self;
  FFDQuery.SQL.Add(ASQL);
end;

constructor TDbSql.Create(ADbConnection: TDbConnection);
begin
  FDbConnection := ADbConnection;
  FParamList := TDictionary<String,Variant>.Create;
  FFDQuery := CreateFDQuery;
end;

function TDbSql.CreateFDQuery: TFDQuery;
begin
  Result := TFDQuery.Create(nil);
  Result.Connection := FDbConnection.GetFDConnection;
end;

destructor TDbSql.Destroy;
begin
  FreeAndNil(FParamList);
  FreeAndNil(FFDQuery);
  inherited;
end;

function TDbSql.ExecSQL(const ASQL: String): Integer;
var
  Qry: TFDQuery;
begin
  Qry := CreateFDQuery;
  try
    Result := Qry.ExecSQL(ASQL);
  finally
    FreeAndNil(Qry);
  end;
end;

procedure TDbSql.ExecSQL;
var
  Qry: TFDQuery;
begin
  Qry := CreateFDQuery;
  try
    Qry.SQL.Text := FFDQuery.SQL.Text;
    Qry.ExecSQL;
  finally
    FreeAndNil(Qry);
  end;
end;

function TDbSql.GetResultDataSet(const IsDetached: Boolean): TDataSet;
var
  Qry: TFDQuery;
begin
  if IsDetached then
  begin
    Qry := CreateFDQuery;
    Qry.SQL.Text := FFDQuery.Text;
  end
  else
    Qry := FFDQuery;
  Qry.Open;
  Qry.First;
  Result := Qry;
end;

function TDbSql.GetResultDataSet: TDataSet;
begin
  FFDQuery.Close;
  FFDQuery.Open;
  FFDQuery.First;
  Result := FFDQuery;
end;

class function TDbSql.New(ADbConnection: TDbConnection): IDbSql;
begin
  Result := Self.Create(ADbConnection);
end;

procedure TDbSql.GetResultDataSetForEach(AProcForEach: TProcForEach);
begin
  FFDQuery.Close;
  FFDQuery.Open;
  FFDQuery.First;
  while not FFDQuery.Eof do
  begin
    if Assigned(AProcForEach) then
      AProcForEach(FFDQuery.Fields);
    FFDQuery.Next;
  end;
end;

function TDbSql.SetParam(const AParamName: String;
  const AParamValue: Variant): IDbSql;
begin
  Result := Self;
  FParamList.Add(AParamName,AParamValue);
end;

end.
