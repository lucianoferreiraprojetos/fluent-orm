unit FluentOrm.Db.QuerySql;

interface

uses
  System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, FluentOrm.Db.DbConnection,
  System.Generics.Collections, FluentOrm.Db.DbResultSet;

type

  IQuerySql = interface
    ['{4532352D-E423-47A3-BDBD-971826138DF4}']
    function AddSQL(const ASQL: String): IQuerySql;
    function SetParam(const AParamName: String; const AParamValue: Variant): IQuerySql;
    procedure ExecSQL; overload;
    function ExecSQL(const ASQL: String): Integer; overload;
    function GetResultSet: IDbResultSet;
  end;

  TQuerySql = class(TInterfacedObject,IQuerySql)
  private
    FDbConnection: TDbConnection;
    FSQL: TStringList;
    FParamList: TDictionary<String,Variant>;
    constructor Create(ADbConnection: TDbConnection);
    destructor Destroy; override;
    function CreateFDQuery: TFDQuery;
  public
    function AddSQL(const ASQL: String): IQuerySql;
    function SetParam(const AParamName: String; const AParamValue: Variant): IQuerySql;
    function GetResultSet: IDbResultSet;
    function ExecSQL(const ASQL: String): Integer; overload;
    procedure ExecSQL; overload;
  public
    class function New(ADbConnection: TDbConnection): IQuerySql;
  end;

implementation

uses
  System.SysUtils;

{ TQuerySql }

function TQuerySql.AddSQL(const ASQL: String): IQuerySql;
begin
  Result := Self;
  FSQL := TStringList.Create;
end;

constructor TQuerySql.Create(ADbConnection: TDbConnection);
begin
  FDbConnection := ADbConnection;
  FParamList := TDictionary<String,Variant>.Create;
end;

function TQuerySql.CreateFDQuery: TFDQuery;
begin
  Result := TFDQuery.Create(nil);
  Result.Connection := FDbConnection.GetFDConnection;
end;

destructor TQuerySql.Destroy;
begin
  FreeAndNil(FParamList);
  FreeAndNil(FSQL);
  inherited;
end;

function TQuerySql.ExecSQL(const ASQL: String): Integer;
var
  Qry: TFDQuery;
begin
  Qry := CreateFDQuery;
  try
    Result := Qry.ExecSQL(ASQL);
  finally
    FreeAndNil(Qry);
  end;
end;

procedure TQuerySql.ExecSQL;
var
  Qry: TFDQuery;
begin
  Qry := CreateFDQuery;
  try
    Qry.SQL.Text := FSQL.Text;
    Qry.ExecSQL;
  finally
    FreeAndNil(Qry);
  end;
end;

function TQuerySql.GetResultSet: IDbResultSet;
var
  Qry: TFDQuery;
begin
  Qry := CreateFDQuery;
  Qry.SQL.Text := FSQL.Text;
  for var LParam in FParamList do
    Qry.ParamByName(LParam.Key).Value := LParam.Value;
  Qry.Open;
  Result := TDbResultSet.New(Qry);
end;

class function TQuerySql.New(ADbConnection: TDbConnection): IQuerySql;
begin
  Result := Self.Create(ADbConnection);
end;

function TQuerySql.SetParam(const AParamName: String;
  const AParamValue: Variant): IQuerySql;
begin
  Result := Self;
  FParamList.Add(AParamName,AParamValue);
end;

end.
